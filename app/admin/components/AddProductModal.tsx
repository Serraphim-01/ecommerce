"use client";

import { useState, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { X } from "lucide-react";
import { supabase } from "@/lib/supabase";
import { useToast } from "@/hooks/use-toast";
import ProductForm, { ProductFormData } from "./ProductForm";
import { Category } from "@/types";

interface AddProductModalProps {
  isOpen: boolean;
  onClose: () => void;
  onProductAdded: () => void;
}

const AddProductModal = ({
  isOpen,
  onClose,
  onProductAdded,
}: AddProductModalProps) => {
  const { toast } = useToast();
  const [isSaving, setIsSaving] = useState(false);
  const [categories, setCategories] = useState<Category[]>([]);
  const [products, setProducts] = useState<ProductFormData[]>([
    {
      name: "",
      description: "",
      price: 0,
      original_price: 0,
      category: "",
      images: [],
      delivery_options: [],
      variants: [],
    },
  ]);

  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = "hidden";
      const fetchCategories = async () => {
        const { data, error } = await supabase.from('categories').select('*');
        if (error) {
          console.error('Error fetching categories:', error);
          setCategories([]);
        } else {
          setCategories(data || []);
          // Set default category for new products
          if (data && data.length > 0) {
            setProducts(prev => prev.map(p => p.category ? p : { ...p, category: data[0]?.name || '' }));
          }
        }
      };
      fetchCategories();
    } else {
      document.body.style.overflow = "auto";
    }
    return () => {
      document.body.style.overflow = "auto";
    };
  }, [isOpen]);

  const addProduct = () => {
    setProducts([
      ...products,
      {
        name: "",
        description: "",
        price: 0,
        original_price: 0,
        category: categories[0]?.name || "",
        images: [],
        delivery_options: [],
        variants: [],
      },
    ]);
  };

  const removeProduct = (index: number) => {
    setProducts(products.filter((_, i) => i !== index));
  };

  const handleProductChange = (index: number, data: ProductFormData) => {
    const newProducts = [...products];
    const oldCategory = newProducts[index].category;
    newProducts[index] = data;
    setProducts(newProducts);

    // If a new category was created in the form
    if (data.category && data.category !== oldCategory && !categories.find(c => c.name.toLowerCase() === data.category.toLowerCase())) {
        const newCategory = {
            id: '', // This will be generated by the DB
            name: data.category,
            slug: data.category.toLowerCase().replace(/ /g, '-'),
        };
        setCategories(prev => [...prev, newCategory]);
    }
  };

  const uploadImages = async (images: (File | string)[]): Promise<string[]> => {
    const uploadPromises = images.map(async (image) => {
      if (typeof image === "string") {
        return image;
      }
      const fileName = `${Date.now()}-${image.name}`;
      const { error } = await supabase.storage
        .from("products")
        .upload(fileName, image, { upsert: true });

      if (error) throw error;

      const {
        data: { publicUrl },
      } = supabase.storage.from("products").getPublicUrl(fileName);

      return publicUrl;
    });

    return Promise.all(uploadPromises);
  };

  const handleSubmit = async () => {
    setIsSaving(true);

    try {
      for (const product of products) {
        if (!product.name || !product.description || product.price <= 0) {
          toast({
            title: "Validation Error",
            description: "Please fill in all required fields for all products.",
            variant: "destructive",
          });
          return;
        }

        const imageUrls =
          product.images.length > 0
            ? await uploadImages(product.images)
            : [];

        const productData = {
          name: product.name,
          description: product.description,
          price: product.price,
          original_price: product.original_price,
          category: product.category,
          images: imageUrls,
          delivery_options: product.delivery_options,
          featured: false,
        };

        const { data: newProduct, error } = await supabase.from("products").insert(productData).select().single();

        if (error) throw error;

        if (newProduct) {
          const variantsData = product.variants.map(variant => ({
            ...variant,
            product_id: newProduct.id,
          }));

          const { error: variantsError } = await supabase.from("product_variants").insert(variantsData);

          if (variantsError) throw variantsError;
        }
      }

      toast({
        title: "Success!",
        description: `${products.length} product(s) added successfully.`,
      });

      onProductAdded();
      onClose();
    } catch (error) {
      console.error("Error adding products:", error);
      toast({
        title: "Error",
        description: "Failed to add products. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsSaving(false);
    }
  };

  return (
    <AnimatePresence>
      {isOpen && [
        <motion.div
          key="overlay"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="fixed inset-0 bg-gray-500 bg-opacity-75 backdrop-blur-sm transition-opacity z-40"
          onClick={onClose}
        />,
        <div key="modal" className="fixed inset-0 z-50 overflow-y-auto">
          <div className="flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0">
            <span
              className="hidden sm:inline-block sm:align-middle sm:h-screen"
              aria-hidden="true"
            >
              &#8203;
            </span>

            <motion.div
              initial={{ opacity: 0, scale: 0.95, y: 20 }}
              animate={{ opacity: 1, scale: 1, y: 0 }}
              exit={{ opacity: 0, scale: 0.95, y: 20 }}
              className="relative inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-4xl sm:w-full sm:p-6"
            >
              <div className="absolute top-0 right-0 pt-4 pr-4">
                <button
                  type="button"
                  className="bg-white rounded-md text-gray-400 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                  onClick={onClose}
                >
                  <span className="sr-only">Close</span>
                  <X className="h-6 w-6" />
                </button>
              </div>
              <div className="w-full">
                <div className="text-center mb-6">
                  <h3 className="text-lg leading-6 font-medium text-gray-900">
                    Add Products
                  </h3>
                  <p className="mt-2 text-sm text-gray-600">
                    Add one or more products to your store
                  </p>
                </div>
                <div className="space-y-4">
                  {products.map((product, index) => (
                    <ProductForm
                      key={index}
                      product={product}
                      onChange={(data) => handleProductChange(index, data)}
                      onRemove={() => removeProduct(index)}
                      isSaving={isSaving}
                      categories={categories}
                    />
                  ))}
                </div>
                <div className="mt-4">
                  <button
                    type="button"
                    onClick={addProduct}
                    className="text-blue-600 hover:text-blue-800"
                  >
                    + Add another product
                  </button>
                </div>
                <div className="mt-6 flex justify-end">
                  <button
                    type="button"
                    onClick={handleSubmit}
                    disabled={isSaving}
                    className="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {isSaving ? "Saving..." : "Save All Products"}
                  </button>
                </div>
              </div>
            </motion.div>
          </div>
        </div>,
      ]}
    </AnimatePresence>
  );
};

export default AddProductModal;
